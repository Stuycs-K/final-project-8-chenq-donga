public class Level {
  private int[][] gameBoard;
  private Map gameMap;
  private int health; // drops when enemies cross the end
  private int money; // amount of money that the player has
  private ArrayList<Tower> towers;
  private ArrayList<Enemy> enemies;
  private int[] start;
  
  
  private final int towerSquare = 0;
  private final int occupiedTowerSquare = 1;
  private final int occupiedPathSquare = -2; // for when enemies are on the path
  private final int path = -1;
  
  
  public Level(String name) { // normal constructor used in normal games
    gameBoard = new int[width/60][height/60];
    gameMap = new Map(name, new int[]{0, 4}, new int[]{gameBoard.length - 1, 4});
    start = gameMap.getStart();
    waypoints();
    setPath();
    towers = new ArrayList<Tower>();
    enemies = new ArrayList<Enemy>();
    health = 20;
    money = 500;
  }
  
  public Level(String name, int hp, int mulah) { // cheat constrctor for demo cases
    gameBoard = new int[width/60][height/60];
    gameMap = new Map(name, new int[]{0, 4}, new int[]{gameBoard.length - 1, 4});
    towers = new ArrayList<Tower>();
    enemies = new ArrayList<Enemy>();
    health = hp;
    money = mulah;
  }
  
  public void waypoints() {
    addWaypoint(new int[]{3, 10});
    addWaypoint(new int[]{11, 4});
  }
  
  // will be called from mouseCLicked function, x and y will the mouseX, mouseY
  public void placeTower(int x, int y) {
    towers.add(new Tower(1, 1, 5, 10, x/60, y/60)); // will change stats later
  }
  
  // will spawn enemy on start, has cooldown time
  public void spawnEnemy() {
    enemies.add(new Enemy(10, 10, 0, 0)); //placeholder values
  }
  
  
  public void loseHP() { // Eventually different enemies will cause different amount of health loss
    int[] end = gameMap.getEnd();
    if (isEnemyOnSquare(end)) {
      health--; 
    }
  }
  
  public int[][] getBoard() {
    return gameBoard;
  }
  
  private boolean isEnemyOnSquare(int[] cord) {
    if (gameBoard[cord[0]][cord[1]] == -2) {
      return true; 
    }
    else {
      return false;
    }
  }
  
  public int getMoney() {
    return money;
  }
  
  public int getHealth() {
    return health; 
  }
  
  public void addWaypoint(int[] cord) {
    gameMap.addWaypoint(cord);
  }
  
  public void setPath() {
    int currentX = start[0];
    int currentY = start[1];
    while (gameMap.size() >= 1) {
      int[] nextLocation = gameMap.nextLocation();
      markLine(currentX, currentY, nextLocation[0], nextLocation[1]);
      currentX = nextLocation[0];
      currentY = nextLocation[1];
    }
  }
  
void markLine(int startX, int startY, int endX, int endY) {
  int deltaX = Math.abs(endX - startX);
  int deltaY = Math.abs(endY - startY);
  int stepX, stepY;
  int x = startX;
  int y = startY;
  
  if (startX < endX) {
    stepX = 1;
  } else {
    stepX = -1;
  }
  
  if (startY < endY) {
    stepY = 1;
  } else {
    stepY = -1;
  }

  gameBoard[x][y] = -1;

  if (deltaX > deltaY) {
    int error = deltaX / 2;
    while (x != endX) {
      x += stepX;
      error -= deltaY;
      if (error < 0) {
        y += stepY;
        error += deltaX;
      }
      gameBoard[x][y] = -1;
    }
  } else {
    int error = deltaY / 2;
    while (y != endY) {
      y += stepY;
      error -= deltaX;
      if (error < 0) {
        x += stepX;
        error += deltaY;
      }
      gameBoard[x][y] = -1;
    }
  }
  
  // Adjust the path representation
  for (int i = startY; i != endY; i += stepY) {
    gameBoard[endX][i] = -1;
  }
  for (int j = startX; j != endX; j += stepX) {
    gameBoard[j][endY] = -1;
  }
}

}
